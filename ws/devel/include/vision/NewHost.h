// Generated by gencpp from file vision/NewHost.msg
// DO NOT EDIT!


#ifndef VISION_MESSAGE_NEWHOST_H
#define VISION_MESSAGE_NEWHOST_H

#include <ros/service_traits.h>


#include <vision/NewHostRequest.h>
#include <vision/NewHostResponse.h>


namespace vision
{

struct NewHost
{

typedef NewHostRequest Request;
typedef NewHostResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct NewHost
} // namespace vision


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::vision::NewHost > {
  static const char* value()
  {
    return "d08a3b641c2f8680fbdfb1ea2e17a3e1";
  }

  static const char* value(const ::vision::NewHost&) { return value(); }
};

template<>
struct DataType< ::vision::NewHost > {
  static const char* value()
  {
    return "vision/NewHost";
  }

  static const char* value(const ::vision::NewHost&) { return value(); }
};


// service_traits::MD5Sum< ::vision::NewHostRequest> should match
// service_traits::MD5Sum< ::vision::NewHost >
template<>
struct MD5Sum< ::vision::NewHostRequest>
{
  static const char* value()
  {
    return MD5Sum< ::vision::NewHost >::value();
  }
  static const char* value(const ::vision::NewHostRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::vision::NewHostRequest> should match
// service_traits::DataType< ::vision::NewHost >
template<>
struct DataType< ::vision::NewHostRequest>
{
  static const char* value()
  {
    return DataType< ::vision::NewHost >::value();
  }
  static const char* value(const ::vision::NewHostRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::vision::NewHostResponse> should match
// service_traits::MD5Sum< ::vision::NewHost >
template<>
struct MD5Sum< ::vision::NewHostResponse>
{
  static const char* value()
  {
    return MD5Sum< ::vision::NewHost >::value();
  }
  static const char* value(const ::vision::NewHostResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::vision::NewHostResponse> should match
// service_traits::DataType< ::vision::NewHost >
template<>
struct DataType< ::vision::NewHostResponse>
{
  static const char* value()
  {
    return DataType< ::vision::NewHost >::value();
  }
  static const char* value(const ::vision::NewHostResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // VISION_MESSAGE_NEWHOST_H
