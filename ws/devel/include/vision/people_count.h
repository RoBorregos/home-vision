// Generated by gencpp from file vision/people_count.msg
// DO NOT EDIT!


#ifndef VISION_MESSAGE_PEOPLE_COUNT_H
#define VISION_MESSAGE_PEOPLE_COUNT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vision
{
template <class ContainerAllocator>
struct people_count_
{
  typedef people_count_<ContainerAllocator> Type;

  people_count_()
    : detected_people(0)
    , people_standing(0)
    , people_sitting(0)
    , people_raising_hand(0)
    , people_pointing(0)  {
    }
  people_count_(const ContainerAllocator& _alloc)
    : detected_people(0)
    , people_standing(0)
    , people_sitting(0)
    , people_raising_hand(0)
    , people_pointing(0)  {
  (void)_alloc;
    }



   typedef int64_t _detected_people_type;
  _detected_people_type detected_people;

   typedef int64_t _people_standing_type;
  _people_standing_type people_standing;

   typedef int64_t _people_sitting_type;
  _people_sitting_type people_sitting;

   typedef int64_t _people_raising_hand_type;
  _people_raising_hand_type people_raising_hand;

   typedef int64_t _people_pointing_type;
  _people_pointing_type people_pointing;





  typedef boost::shared_ptr< ::vision::people_count_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision::people_count_<ContainerAllocator> const> ConstPtr;

}; // struct people_count_

typedef ::vision::people_count_<std::allocator<void> > people_count;

typedef boost::shared_ptr< ::vision::people_count > people_countPtr;
typedef boost::shared_ptr< ::vision::people_count const> people_countConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision::people_count_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision::people_count_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vision::people_count_<ContainerAllocator1> & lhs, const ::vision::people_count_<ContainerAllocator2> & rhs)
{
  return lhs.detected_people == rhs.detected_people &&
    lhs.people_standing == rhs.people_standing &&
    lhs.people_sitting == rhs.people_sitting &&
    lhs.people_raising_hand == rhs.people_raising_hand &&
    lhs.people_pointing == rhs.people_pointing;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vision::people_count_<ContainerAllocator1> & lhs, const ::vision::people_count_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vision::people_count_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision::people_count_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision::people_count_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision::people_count_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision::people_count_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision::people_count_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision::people_count_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dd5d4b83e54fd0abe744ecf17478c695";
  }

  static const char* value(const ::vision::people_count_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdd5d4b83e54fd0abULL;
  static const uint64_t static_value2 = 0xe744ecf17478c695ULL;
};

template<class ContainerAllocator>
struct DataType< ::vision::people_count_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision/people_count";
  }

  static const char* value(const ::vision::people_count_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision::people_count_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 detected_people\n"
"int64 people_standing\n"
"int64 people_sitting\n"
"int64 people_raising_hand\n"
"int64 people_pointing\n"
;
  }

  static const char* value(const ::vision::people_count_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision::people_count_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.detected_people);
      stream.next(m.people_standing);
      stream.next(m.people_sitting);
      stream.next(m.people_raising_hand);
      stream.next(m.people_pointing);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct people_count_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision::people_count_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision::people_count_<ContainerAllocator>& v)
  {
    s << indent << "detected_people: ";
    Printer<int64_t>::stream(s, indent + "  ", v.detected_people);
    s << indent << "people_standing: ";
    Printer<int64_t>::stream(s, indent + "  ", v.people_standing);
    s << indent << "people_sitting: ";
    Printer<int64_t>::stream(s, indent + "  ", v.people_sitting);
    s << indent << "people_raising_hand: ";
    Printer<int64_t>::stream(s, indent + "  ", v.people_raising_hand);
    s << indent << "people_pointing: ";
    Printer<int64_t>::stream(s, indent + "  ", v.people_pointing);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_MESSAGE_PEOPLE_COUNT_H
