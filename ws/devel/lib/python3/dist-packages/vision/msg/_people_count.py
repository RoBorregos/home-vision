# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vision/people_count.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class people_count(genpy.Message):
  _md5sum = "dd5d4b83e54fd0abe744ecf17478c695"
  _type = "vision/people_count"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 detected_people
int64 people_standing
int64 people_sitting
int64 people_raising_hand
int64 people_pointing"""
  __slots__ = ['detected_people','people_standing','people_sitting','people_raising_hand','people_pointing']
  _slot_types = ['int64','int64','int64','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       detected_people,people_standing,people_sitting,people_raising_hand,people_pointing

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(people_count, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.detected_people is None:
        self.detected_people = 0
      if self.people_standing is None:
        self.people_standing = 0
      if self.people_sitting is None:
        self.people_sitting = 0
      if self.people_raising_hand is None:
        self.people_raising_hand = 0
      if self.people_pointing is None:
        self.people_pointing = 0
    else:
      self.detected_people = 0
      self.people_standing = 0
      self.people_sitting = 0
      self.people_raising_hand = 0
      self.people_pointing = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5q().pack(_x.detected_people, _x.people_standing, _x.people_sitting, _x.people_raising_hand, _x.people_pointing))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.detected_people, _x.people_standing, _x.people_sitting, _x.people_raising_hand, _x.people_pointing,) = _get_struct_5q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5q().pack(_x.detected_people, _x.people_standing, _x.people_sitting, _x.people_raising_hand, _x.people_pointing))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.detected_people, _x.people_standing, _x.people_sitting, _x.people_raising_hand, _x.people_pointing,) = _get_struct_5q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5q = None
def _get_struct_5q():
    global _struct_5q
    if _struct_5q is None:
        _struct_5q = struct.Struct("<5q")
    return _struct_5q
